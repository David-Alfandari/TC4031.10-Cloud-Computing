
#include <iostream>
#include <cstdlib>
#include <ctime>
#include <omp.h>

#define N 1000
#define chunk 100
#define mostrar 10

// Función para imprimir los primeros 'mostrar' elementos de un arreglo
void imprimeArreglo(float *d);

int main()
{
    // Inicializar semilla para valores aleatorios
    std::srand(std::time(0));

    // Mensaje de inicio
    std::cout << "Sumando Arreglos en Paralelo!\n";

    // Declaración de arreglos a, b, y c
    float a[N], b[N], c[N];
    int i;

    // Inicializar arreglos a y b con valores aleatorios entre 0 y 99
    for (i = 0; i < N; i++)
    {
        a[i] = std::rand() % 100; // Genera un número aleatorio entre 0 y 99
        b[i] = std::rand() % 100;
    }

    // Establecer el tamaño del chunk para la planificación estática
    int pedazos = chunk;

    // Inicio de la región paralela utilizando OpenMP
#pragma omp parallel for \
    shared(a, b, c, pedazos) private(i) \
    schedule(static, pedazos)

    // Bucle paralelo: suma de elementos de a y b en c
    for (i = 0; i < N; i++)
        c[i] = a[i] + b[i];

    // Fin de la región paralela

    // Imprimir los primeros 'mostrar' elementos de los arreglos a, b, y c
    std::cout << "Imprimiendo los primeros " << mostrar << " valores del arreglo a:" << std::endl;
    imprimeArreglo(a);

    std::cout << "Imprimiendo los primeros " << mostrar << " valores del arreglo b:" << std::endl;
    imprimeArreglo(b);

    std::cout << "Imprimiendo los primeros " << mostrar << " valores del arreglo c:" << std::endl;
    imprimeArreglo(c);

    return 0;
}

// Implementación de la función para imprimir un arreglo
void imprimeArreglo(float *d)
{
    for (int x = 0; x < mostrar; x++)
        std::cout << d[x] << " - ";
    std::cout << std::endl;
}